@page "/missiondb/containers"
@inject YamcsClient client
@inject InstantState Instance
@implements IDisposable
<h1>Containers</h1>



@if (conatinerpages == null)
{
    <p><em>Loading...</em></p>
    <div class="spinner"></div>
}
else
{
    <Pagination TotaPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2"
                SelectedPage="SelectedPage"></Pagination>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Max Interval</th>
                <th>Size in Bits</th>
                <th>Base Containere</th>
                <th>Restriction Criteria</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var conatiner in conatinerpages.Containers)
            {
                <tr>
                    <td>@conatiner.QualifiedName</td>
                    <td>@conatiner.MaxInterval</td>
                    <td>@conatiner.sizeInBits</td>
                    @if (conatiner.BaseContainer != null)
                    {
                        <td>@conatiner.BaseContainer.Name</td>

                    }
                    else
                    {
                        <td></td>
                    }
                    @if (conatiner.RestrictionCriteria != null)
                    {
                        @foreach (var item in conatiner.RestrictionCriteria)
                        {
                        <tr>
                            <td>@item.Parameter.Name == @item.Value</td>
                        </tr>

                    }


                    }
                    else
                    {
                    <td></td>
                }

                    </tr>
                }
            </tbody>
        </table>
    }
<Index />
@code {
    private ContainersPage conatinerpages;
    private int totalPageQuantity;
    private int currentPage = 1;

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadContainer(page);
    }
    protected override async Task OnInitializedAsync()
    {
        Instance.OnChange += StateHasChanged;
        Console.WriteLine("state {0}", Instance.Instance);
        await LoadContainer();
    }

    async Task LoadContainer(int pagee = 1, int quantityperpage = 100)
    {
        conatinerpages = await client.getContainers(Instance.Instance, pagee, quantityperpage);
        totalPageQuantity = conatinerpages.TotalSize;
    }
    public void Dispose()
    {
        Instance.OnChange -= StateHasChanged;
    }

}
